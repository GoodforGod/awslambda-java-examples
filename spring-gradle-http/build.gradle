plugins {
    id "java"
    id "jacoco"

    id "org.springframework.boot" version "3.1.3"
    id "io.spring.dependency-management" version "1.1.2"
    id "org.graalvm.buildtools.native" version "0.9.24"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/release/" }
    maven { url "https://maven.springframework.org/release/" }
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

dependencies {
    implementation "org.springframework.boot:spring-boot-starter"
    implementation "org.springframework.boot:spring-boot-starter-webflux"
    implementation "org.springframework.cloud:spring-cloud-function-web:4.0.5"
    implementation "org.springframework.cloud:spring-cloud-function-context:4.0.5"
    implementation "org.springframework.cloud:spring-cloud-function-adapter-aws:4.0.5"

    implementation "com.amazonaws:aws-lambda-java-events:3.11.2"
    implementation "com.amazonaws:aws-lambda-java-core:1.2.2"

    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.9.3"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}

bootJar {
    mainClass = "io.goodforgod.spring.LambdaEntrypoint"
}

bootBuildImage {
    builder = "paketobuildpacks/builder:base"
    buildpacks = ["gcr.io/paketo-buildpacks/java-native-image:8.16.0"]
    environment = [
            "BP_NATIVE_IMAGE": "true"
    ]
}

test {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
        exceptionFormat("full")
    }

    reports {
        html.required = false
        junitXml.required = false
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.incremental = true
    options.fork = true
}

javadoc {
    options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}

check.dependsOn jacocoTestReport
jacocoTestReport {
    reports {
        xml.required = true
        html.destination file("${buildDir}/jacocoHtml")
    }
}
