plugins {
    id "java"
    id "jacoco"
    id "application"

    id "org.sonarqube" version "3.3"
    id "com.diffplug.spotless" version "5.14.3"
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

repositories {
    mavenLocal()
    mavenCentral()
}

group = groupId
version = artifactVersion

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

spotless {
    java {
        encoding("UTF-8")
        importOrder()
        removeUnusedImports()
        eclipse().configFile("${projectDir}/config/codestyle.xml")
    }
}

configurations {
    all {
        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds' // check for updates every build
        }
    }
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:1.18.20"
    annotationProcessor "io.goodforgod:graalvm-hint-processor:0.9.0-SNAPSHOT"

    compileOnly "org.projectlombok:lombok:1.18.20"
    compileOnly "io.goodforgod:graalvm-hint-annotations:0.9.0-SNAPSHOT"

    implementation "org.slf4j:slf4j-simple:1.7.30"
    implementation "io.goodforgod:simple-lambda:0.10.0-SNAPSHOT"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testRuntimeOnly "org.slf4j:slf4j-simple:1.7.30"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
}

test {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
        exceptionFormat("full")
    }

    reports {
        html.enabled(false)
        junitXml.enabled(false)
    }
}

mainClassName = "io.goodforgod.simplelambda.LambdaEntrypoint"
jar.enabled = true
shadowJar {
    mergeServiceFiles()
    manifest {
        attributes "Main-Class": mainClassName
        attributes "Implementation-Version": artifactVersion
        attributes "Build-Version": buildNumber
    }
}

tasks.withType(JavaCompile) {
    options.encoding("UTF-8")
    options.incremental(true)
    options.fork = true
}

javadoc {
    options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}

check.dependsOn jacocoTestReport
jacocoTestReport {
    reports {
        xml.enabled(true)
        html.destination(file("${buildDir}/jacocoHtml"))
    }
}
