plugins {
    id "java"
    id "jacoco"
    id "application"

    id "io.micronaut.application" version "2.0.3"
    id "org.sonarqube" version "3.3"
    id "com.diffplug.spotless" version "5.11.0"
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

repositories {
    mavenLocal()
    mavenCentral()
}

group = groupId
version = artifactVersion

sourceCompatibility = 11
targetCompatibility = 11

spotless {
    java {
        encoding "UTF-8"
        removeUnusedImports()
        eclipse().configFile "${projectDir}/config/codestyle.xml"
    }
}

micronaut {
    version("3.0.0")
    processing {
        incremental(true)
        module(project.name)
        group(project.group)
        annotations("io.aws.lambda.simple.*")
    }
}

dependencies {
    compileOnly "org.graalvm.nativeimage:svm"
    compileOnly "org.projectlombok:lombok:1.18.20"

    annotationProcessor "org.projectlombok:lombok:1.18.20"
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-graal"

    implementation "org.slf4j:slf4j-simple:1.7.30"
    implementation "com.github.goodforgod:simple-lambda:0.9.0-SNAPSHOT"

    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation "io.micronaut:micronaut-inject-java"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testRuntimeOnly "org.slf4j:slf4j-simple:1.7.30"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
}

test {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
        exceptionFormat("full")
    }

    reports {
        html.enabled(false)
        junitXml.enabled(false)
    }
}

mainClassName = "io.aws.lambda.simple.runtime.InputLambdaEntrypoint"
jar.enabled = true
shadowJar {
    dependsOn tasks.generateResourceConfigFile
    mergeServiceFiles()
    manifest {
        attributes "Main-Class": mainClassName
        attributes "Implementation-Version": artifactVersion
        attributes "Build-Version": buildNumber
    }
}

generateResourceConfigFile {
    outputDirectory = layout.buildDirectory.dir("classes/java/main/META-INF/native-image/native-resources")
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.incremental = true
    options.fork = true
}

javadoc {
    options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}

check.dependsOn jacocoTestReport
jacocoTestReport {
    reports {
        xml.enabled(true)
        html.destination(file("${buildDir}/jacocoHtml"))
    }
}
