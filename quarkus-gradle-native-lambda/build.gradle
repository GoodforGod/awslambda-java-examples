plugins {
    id "java"
    id "jacoco"

    id "io.quarkus" version "2.1.3.Final"
    id "org.sonarqube" version "3.3"
    id "com.diffplug.spotless" version "5.11.0"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

group = groupId
version = artifactVersion

sourceCompatibility = 11
targetCompatibility = 11

spotless {
    java {
        encoding "UTF-8"
        removeUnusedImports()
        eclipse().configFile "${projectDir}/config/codestyle.xml"
    }
}

configurations {
    quarkusBom
    compileOnly.extendsFrom(quarkusBom)
    implementation.extendsFrom(quarkusBom)
    annotationProcessor.extendsFrom(quarkusBom)
    testAnnotationProcessor.extendsFrom(quarkusBom)
}

dependencies {
    quarkusBom enforcedPlatform("io.quarkus:quarkus-bom:2.0.3.Final")

    compileOnly "org.projectlombok:lombok:1.18.20"
    annotationProcessor "org.projectlombok:lombok:1.18.20"

    implementation "io.quarkus:quarkus-resteasy"
    implementation "io.quarkus:quarkus-amazon-lambda"

    testImplementation "io.quarkus:quarkus-test-amazon-lambda"

    testImplementation "io.quarkus:quarkus-junit5"
    testImplementation "io.rest-assured:rest-assured"
}

test {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
        exceptionFormat("full")
    }

    reports {
        html.enabled(false)
        junitXml.enabled(false)
    }
}

quarkusBuild {
    nativeArgs {
        containerBuild = true
        buildImage = "quay.io/quarkus/ubi-quarkus-native-image:21.2.0-java11"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.incremental = true
    options.fork = true
}

javadoc {
    options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}

check.dependsOn jacocoTestReport
jacocoTestReport {
    reports {
        xml.enabled(true)
        html.destination(file("${buildDir}/jacocoHtml"))
    }
}
