plugins {
    id "java"
    id "jacoco"

    id "io.quarkus" version "2.0.3.Final"
    id "org.sonarqube" version "3.3"
    id "com.diffplug.spotless" version "5.11.0"
    id "com.github.johnrengelman.shadow" version "6.1.0"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

group = groupId
version = artifactVersion

sourceCompatibility = 11
targetCompatibility = 11

spotless {
    java {
        encoding "UTF-8"
        removeUnusedImports()
        eclipse().configFile "${projectDir}/config/codestyle.xml"
    }
}

configurations {
    all {
        resolutionStrategy {
            cacheChangingModulesFor(1000, "seconds") // refresh cache for snapshots
        }
    }
}

dependencies {
    compileOnly "org.projectlombok:lombok:1.18.20"
    annotationProcessor "org.projectlombok:lombok:1.18.20"

    compile enforcedPlatform("io.quarkus:quarkus-bom:2.0.3.Final")
    compile 'io.quarkus:quarkus-resteasy'
    compile 'io.quarkus:quarkus-amazon-lambda'

    testCompile"io.quarkus:quarkus-test-amazon-lambda"

    testCompile 'io.quarkus:quarkus-junit5'
    testCompile 'io.rest-assured:rest-assured'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }

    environment([
            "SECURITY_ENABLED"    : "false",
            "LAMBDA_LOGGING_LEVEL": "DEBUG",
    ])
}

quarkusBuild {
    nativeArgs {
        containerBuild = true
        buildImage = "quay.io/quarkus/ubi-quarkus-native-image:21.2.0-java11"
    }
}

jar.enabled = true
shadowJar {
    mergeServiceFiles()
    manifest {
        attributes "Main-Class":  "io.aws.lambda.quarkus.AwsLambdaRuntime"
        attributes "Implementation-Version": artifactVersion
        attributes "Build-Version": buildNumber
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.incremental = true
    options.fork = true
}

tasks.withType(Test) {
    reports.html.enabled = false
    reports.junitXml.enabled = false
}

javadoc {
    options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}

check.dependsOn jacocoTestReport
jacocoTestReport {
    reports {
        xml.enabled true
        html.destination file("${buildDir}/jacocoHtml")
    }
}
