plugins {
    id "java"
    id "jacoco"
    id "org.springframework.boot" version "2.5.1"
    id "org.springframework.experimental.aot" version "0.10.0"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id 'org.graalvm.buildtools.native' version '0.9.0'

    id "org.sonarqube" version "3.1.1"
    id "com.diffplug.spotless" version "5.11.0"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven{ url "https://maven.springframework.org/release/" }
    maven{ url "https://repo.spring.io/release/" }
}

group = groupId
version = artifactVersion

sourceCompatibility = 11
targetCompatibility = 11

spotless {
    java {
        encoding "UTF-8"
        removeUnusedImports()
        eclipse().configFile "${projectDir}/config/codestyle.xml"
    }
}

dependencies {
    compileOnly "org.projectlombok:lombok:1.18.20"

    annotationProcessor "org.projectlombok:lombok:1.18.20"

    compile "org.springframework.boot:spring-boot-starter"
    compile "org.springframework.experimental:spring-native:0.9.2"
    compile "org.springframework.experimental:spring-native-configuration:0.9.2"
    compile "org.springframework.cloud:spring-cloud-function-web:3.1.3"
    compile "org.springframework.cloud:spring-cloud-function-context:3.1.3"
    compile "org.springframework.cloud:spring-cloud-function-adapter-aws:3.1.3"

    compile "com.amazonaws:aws-lambda-java-events:3.9.0"
    compile "com.amazonaws:aws-lambda-java-core:1.2.1"

    testCompile("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }

    testCompile "org.junit.jupiter:junit-jupiter-api:5.7.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}

bootJar {
    mainClass = "io.aws.lambda.spring.AwsLambdaRuntime"
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }

    environment([
            "SECURITY_ENABLED"     : "false",
            "USE_INTEGRATION_TESTS": "$useIntegrationTests",
    ])
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.incremental = true
    options.fork = true
}

tasks.withType(Test) {
    reports.html.enabled = false
    reports.junitXml.enabled = false
}

javadoc {
    options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}

check.dependsOn jacocoTestReport
jacocoTestReport {
    reports {
        xml.enabled true
        html.destination file("${buildDir}/jacocoHtml")
    }
}