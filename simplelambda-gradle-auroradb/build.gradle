plugins {
    id "java"
    id "jacoco"
    id "application"

    id "org.sonarqube" version "3.3"
    id "com.diffplug.spotless" version "6.1.0"
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

repositories {
    mavenLocal()
    mavenCentral()
}

mainClassName = "io.goodforgod.simplelambda.LambdaEntrypoint"

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

spotless {
    java {
        encoding("UTF-8")
        importOrder()
        removeUnusedImports()
        eclipse("4.21.0").configFile("${rootDir}/config/codestyle.xml")
    }
}

configurations {
    all {
        resolutionStrategy {
            cacheChangingModulesFor 0, "seconds" // check for updates every build
        }
    }
    awsSdkBom
    compileOnly.extendsFrom(awsSdkBom)
    implementation.extendsFrom(awsSdkBom)
    annotationProcessor.extendsFrom(awsSdkBom)
    testAnnotationProcessor.extendsFrom(awsSdkBom)
}

dependencies {
    awsSdkBom enforcedPlatform("software.amazon.awssdk:bom:2.17.118")

    annotationProcessor "io.goodforgod:graalvm-hint-processor:0.17.0-SNAPSHOT"
    compileOnly "io.goodforgod:graalvm-hint-annotations:0.17.0-SNAPSHOT"

    implementation "org.mariadb.jdbc:mariadb-java-client:2.7.5"

    implementation "io.goodforgod:slf4j-simple-logger:0.13.0"
    implementation "io.goodforgod:simple-awslambda:0.22.0-SNAPSHOT"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.8.2"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.8.2"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.8.2"
}

test {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
        exceptionFormat("full")
    }

    reports {
        html.enabled(false)
        junitXml.enabled(false)
    }

    environment([
            "AURORA_ENDPOINT": "1",
            "AURORA_USER"    : "1",
            "AURORA_PASS"    : "1",
            "AURORA_DB"      : "1",
    ])
}

jar.enabled = true
shadowJar {
    mergeServiceFiles()
    manifest {
        attributes "Main-Class": mainClassName
        attributes "Implementation-Version": artifactVersion
        attributes "Build-Time": java.time.OffsetDateTime.now()
    }
}

tasks.withType(JavaCompile) {
    options.encoding("UTF-8")
    options.incremental(true)
    options.fork = true
}

javadoc {
    options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}

check.dependsOn jacocoTestReport
jacocoTestReport {
    reports {
        xml.enabled(true)
        html.destination file("${buildDir}/jacocoHtml")
    }
}
