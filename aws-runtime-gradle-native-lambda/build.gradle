plugins {
    id "java"
    id "jacoco"
    id "application"

    id "io.micronaut.application" version "1.5.0"
    id "org.sonarqube" version "3.1.1"
    id "com.diffplug.spotless" version "5.11.0"
    id "com.github.johnrengelman.shadow" version "6.1.0"
}

repositories {
    mavenLocal()
    mavenCentral()
}

group = groupId
version = artifactVersion

sourceCompatibility = 11
targetCompatibility = 11

spotless {
    java {
        encoding "UTF-8"
        removeUnusedImports()
        eclipse().configFile "${projectDir}/config/codestyle.xml"
    }
}

configurations {
    all {
        resolutionStrategy {
            cacheChangingModulesFor(1000, "seconds") // refresh cache for snapshots
        }
    }
}

micronaut {
    version "2.5.5"
    processing {
        incremental true
        module project.name
        group project.group
        annotations "io.lambda.*"
    }
}

dependencies {
    compileOnly "org.projectlombok:lombok:1.18.20"

    annotationProcessor "org.projectlombok:lombok:1.18.20"
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-graal"

    compileOnly "org.graalvm.nativeimage:svm"

    compile "com.github.goodforgod:aws-lambda-runtime:2.0.0-SNAPSHOT"
    compile "org.slf4j:slf4j-simple:1.7.30"

    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testCompile "io.micronaut:micronaut-inject-java"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testRuntimeOnly "org.slf4j:slf4j-simple:1.7.30"
    testCompile "org.junit.jupiter:junit-jupiter-api"
    testCompile "org.junit.jupiter:junit-jupiter-params"
}

//noinspection GroovyAssignabilityCheck
run {
    environment([
            "SECURITY_ENABLED"      : "false",
            "AWS_LAMBDA_RUNTIME_API": "localhost:8000",
            "LAMBDA_LOGGING_LEVEL"  : "DEBUG",
    ])
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }

    environment([
            "SECURITY_ENABLED"    : "false",
            "LAMBDA_LOGGING_LEVEL": "DEBUG",
    ])
}

mainClassName = "io.aws.lambda.runtime.micronaut.AwsLambdaRuntime"
jar.enabled = true
shadowJar {
    mergeServiceFiles()
    manifest {
        attributes "Main-Class": mainClassName
        attributes "Implementation-Version": artifactVersion
        attributes "Build-Version": buildNumber
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.incremental = true
    options.fork = true
}

tasks.withType(Test) {
    reports.html.enabled = false
    reports.junitXml.enabled = false
}

javadoc {
    options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}

check.dependsOn jacocoTestReport
jacocoTestReport {
    reports {
        xml.enabled true
        html.destination file("${buildDir}/jacocoHtml")
    }
}
